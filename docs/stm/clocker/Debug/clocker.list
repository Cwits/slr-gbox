
clocker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001224  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013bc  080013bc  00021198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080013bc  080013bc  000113bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013c0  080013c0  000113c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00001198  20000000  080013c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20001198  0800255c  00021198  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200011b4  0800255c  000211b4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00021198  2**0
                  CONTENTS, READONLY
  9 .debug_info   000047aa  00000000  00000000  000211c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d8b  00000000  00000000  00025972  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000508  00000000  00000000  00026700  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00026c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001e6d  00000000  00000000  00027078  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f7e  00000000  00000000  00028ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ae63  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000142c  00000000  00000000  0002aee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20001198 	.word	0x20001198
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080013a4 	.word	0x080013a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000119c 	.word	0x2000119c
 80001d4:	080013a4 	.word	0x080013a4

080001d8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001e0:	2300      	movs	r3, #0
 80001e2:	73fb      	strb	r3, [r7, #15]
 80001e4:	2300      	movs	r3, #0
 80001e6:	73bb      	strb	r3, [r7, #14]
 80001e8:	230f      	movs	r3, #15
 80001ea:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d039      	beq.n	8000268 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <NVIC_Init+0xbc>)
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	43db      	mvns	r3, r3
 80001fa:	0a1b      	lsrs	r3, r3, #8
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	f003 0307 	and.w	r3, r3, #7
 8000202:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	f1c3 0304 	rsb	r3, r3, #4
 800020a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800020c:	7b7a      	ldrb	r2, [r7, #13]
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	fa42 f303 	asr.w	r3, r2, r3
 8000214:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	785b      	ldrb	r3, [r3, #1]
 800021a:	461a      	mov	r2, r3
 800021c:	7bbb      	ldrb	r3, [r7, #14]
 800021e:	fa02 f303 	lsl.w	r3, r2, r3
 8000222:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	789a      	ldrb	r2, [r3, #2]
 8000228:	7b7b      	ldrb	r3, [r7, #13]
 800022a:	4013      	ands	r3, r2
 800022c:	b2da      	uxtb	r2, r3
 800022e:	7bfb      	ldrb	r3, [r7, #15]
 8000230:	4313      	orrs	r3, r2
 8000232:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000234:	7bfb      	ldrb	r3, [r7, #15]
 8000236:	011b      	lsls	r3, r3, #4
 8000238:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800023a:	4a17      	ldr	r2, [pc, #92]	; (8000298 <NVIC_Init+0xc0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	4413      	add	r3, r2
 8000242:	7bfa      	ldrb	r2, [r7, #15]
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000248:	4a13      	ldr	r2, [pc, #76]	; (8000298 <NVIC_Init+0xc0>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	095b      	lsrs	r3, r3, #5
 8000250:	b2db      	uxtb	r3, r3
 8000252:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	f003 031f 	and.w	r3, r3, #31
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000262:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000266:	e00f      	b.n	8000288 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000268:	490b      	ldr	r1, [pc, #44]	; (8000298 <NVIC_Init+0xc0>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	095b      	lsrs	r3, r3, #5
 8000270:	b2db      	uxtb	r3, r3
 8000272:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	f003 031f 	and.w	r3, r3, #31
 800027c:	2201      	movs	r2, #1
 800027e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	f100 0320 	add.w	r3, r0, #32
 8000284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000288:	bf00      	nop
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000e100 	.word	0xe000e100

0800029c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f023 0201 	bic.w	r2, r3, #1
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2221      	movs	r2, #33	; 0x21
 80002d2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <DMA_DeInit+0x154>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d103      	bne.n	80002e4 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80002dc:	4b45      	ldr	r3, [pc, #276]	; (80003f4 <DMA_DeInit+0x158>)
 80002de:	223d      	movs	r2, #61	; 0x3d
 80002e0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002e2:	e07e      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a44      	ldr	r2, [pc, #272]	; (80003f8 <DMA_DeInit+0x15c>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d104      	bne.n	80002f6 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80002ec:	4b41      	ldr	r3, [pc, #260]	; (80003f4 <DMA_DeInit+0x158>)
 80002ee:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80002f2:	609a      	str	r2, [r3, #8]
}
 80002f4:	e075      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a40      	ldr	r2, [pc, #256]	; (80003fc <DMA_DeInit+0x160>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d104      	bne.n	8000308 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80002fe:	4b3d      	ldr	r3, [pc, #244]	; (80003f4 <DMA_DeInit+0x158>)
 8000300:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000304:	609a      	str	r2, [r3, #8]
}
 8000306:	e06c      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a3d      	ldr	r2, [pc, #244]	; (8000400 <DMA_DeInit+0x164>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d104      	bne.n	800031a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000310:	4b38      	ldr	r3, [pc, #224]	; (80003f4 <DMA_DeInit+0x158>)
 8000312:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000316:	609a      	str	r2, [r3, #8]
}
 8000318:	e063      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a39      	ldr	r2, [pc, #228]	; (8000404 <DMA_DeInit+0x168>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d103      	bne.n	800032a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000322:	4b34      	ldr	r3, [pc, #208]	; (80003f4 <DMA_DeInit+0x158>)
 8000324:	4a38      	ldr	r2, [pc, #224]	; (8000408 <DMA_DeInit+0x16c>)
 8000326:	60da      	str	r2, [r3, #12]
}
 8000328:	e05b      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a37      	ldr	r2, [pc, #220]	; (800040c <DMA_DeInit+0x170>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d103      	bne.n	800033a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000332:	4b30      	ldr	r3, [pc, #192]	; (80003f4 <DMA_DeInit+0x158>)
 8000334:	4a36      	ldr	r2, [pc, #216]	; (8000410 <DMA_DeInit+0x174>)
 8000336:	60da      	str	r2, [r3, #12]
}
 8000338:	e053      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a35      	ldr	r2, [pc, #212]	; (8000414 <DMA_DeInit+0x178>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d103      	bne.n	800034a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000342:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <DMA_DeInit+0x158>)
 8000344:	4a34      	ldr	r2, [pc, #208]	; (8000418 <DMA_DeInit+0x17c>)
 8000346:	60da      	str	r2, [r3, #12]
}
 8000348:	e04b      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a33      	ldr	r2, [pc, #204]	; (800041c <DMA_DeInit+0x180>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d104      	bne.n	800035c <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000352:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <DMA_DeInit+0x158>)
 8000354:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000358:	60da      	str	r2, [r3, #12]
}
 800035a:	e042      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a30      	ldr	r2, [pc, #192]	; (8000420 <DMA_DeInit+0x184>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d103      	bne.n	800036c <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000364:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <DMA_DeInit+0x188>)
 8000366:	223d      	movs	r2, #61	; 0x3d
 8000368:	609a      	str	r2, [r3, #8]
}
 800036a:	e03a      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a2e      	ldr	r2, [pc, #184]	; (8000428 <DMA_DeInit+0x18c>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d104      	bne.n	800037e <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <DMA_DeInit+0x188>)
 8000376:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	e031      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a2a      	ldr	r2, [pc, #168]	; (800042c <DMA_DeInit+0x190>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d104      	bne.n	8000390 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000386:	4b27      	ldr	r3, [pc, #156]	; (8000424 <DMA_DeInit+0x188>)
 8000388:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800038c:	609a      	str	r2, [r3, #8]
}
 800038e:	e028      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a27      	ldr	r2, [pc, #156]	; (8000430 <DMA_DeInit+0x194>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d104      	bne.n	80003a2 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <DMA_DeInit+0x188>)
 800039a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800039e:	609a      	str	r2, [r3, #8]
}
 80003a0:	e01f      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a23      	ldr	r2, [pc, #140]	; (8000434 <DMA_DeInit+0x198>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d103      	bne.n	80003b2 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <DMA_DeInit+0x188>)
 80003ac:	4a16      	ldr	r2, [pc, #88]	; (8000408 <DMA_DeInit+0x16c>)
 80003ae:	60da      	str	r2, [r3, #12]
}
 80003b0:	e017      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a20      	ldr	r2, [pc, #128]	; (8000438 <DMA_DeInit+0x19c>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d103      	bne.n	80003c2 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <DMA_DeInit+0x188>)
 80003bc:	4a14      	ldr	r2, [pc, #80]	; (8000410 <DMA_DeInit+0x174>)
 80003be:	60da      	str	r2, [r3, #12]
}
 80003c0:	e00f      	b.n	80003e2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a1d      	ldr	r2, [pc, #116]	; (800043c <DMA_DeInit+0x1a0>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d103      	bne.n	80003d2 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003ca:	4b16      	ldr	r3, [pc, #88]	; (8000424 <DMA_DeInit+0x188>)
 80003cc:	4a12      	ldr	r2, [pc, #72]	; (8000418 <DMA_DeInit+0x17c>)
 80003ce:	60da      	str	r2, [r3, #12]
}
 80003d0:	e007      	b.n	80003e2 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a1a      	ldr	r2, [pc, #104]	; (8000440 <DMA_DeInit+0x1a4>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d103      	bne.n	80003e2 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <DMA_DeInit+0x188>)
 80003dc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80003e0:	60da      	str	r2, [r3, #12]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40026010 	.word	0x40026010
 80003f4:	40026000 	.word	0x40026000
 80003f8:	40026028 	.word	0x40026028
 80003fc:	40026040 	.word	0x40026040
 8000400:	40026058 	.word	0x40026058
 8000404:	40026070 	.word	0x40026070
 8000408:	2000003d 	.word	0x2000003d
 800040c:	40026088 	.word	0x40026088
 8000410:	20000f40 	.word	0x20000f40
 8000414:	400260a0 	.word	0x400260a0
 8000418:	203d0000 	.word	0x203d0000
 800041c:	400260b8 	.word	0x400260b8
 8000420:	40026410 	.word	0x40026410
 8000424:	40026400 	.word	0x40026400
 8000428:	40026428 	.word	0x40026428
 800042c:	40026440 	.word	0x40026440
 8000430:	40026458 	.word	0x40026458
 8000434:	40026470 	.word	0x40026470
 8000438:	40026488 	.word	0x40026488
 800043c:	400264a0 	.word	0x400264a0
 8000440:	400264b8 	.word	0x400264b8

08000444 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000458:	68fa      	ldr	r2, [r7, #12]
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <DMA_Init+0xac>)
 800045c:	4013      	ands	r3, r2
 800045e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800046e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800047a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	6a1b      	ldr	r3, [r3, #32]
 8000480:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000486:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800048c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000492:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000498:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	4313      	orrs	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f023 0307 	bic.w	r3, r3, #7
 80004b2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4313      	orrs	r3, r2
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	691a      	ldr	r2, [r3, #16]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689a      	ldr	r2, [r3, #8]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	60da      	str	r2, [r3, #12]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	f01c803f 	.word	0xf01c803f

080004f4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d006      	beq.n	8000514 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f043 0201 	orr.w	r2, r3, #1
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000512:	e005      	b.n	8000520 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f023 0201 	bic.w	r2, r3, #1
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d006      	beq.n	800054c <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	e005      	b.n	8000558 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	611a      	str	r2, [r3, #16]
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8000576:	78fb      	ldrb	r3, [r7, #3]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d006      	beq.n	800058a <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
  }
}
 8000588:	e005      	b.n	8000596 <DMA_DoubleBufferModeCmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b085      	sub	sp, #20
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e001      	b.n	80005c4 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a15      	ldr	r2, [pc, #84]	; (8000640 <DMA_GetFlagStatus+0x6c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d802      	bhi.n	80005f4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <DMA_GetFlagStatus+0x70>)
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	e001      	b.n	80005f8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <DMA_GetFlagStatus+0x74>)
 80005f6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e002      	b.n	8000610 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000616:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800061a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4013      	ands	r3, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000626:	2301      	movs	r3, #1
 8000628:	75fb      	strb	r3, [r7, #23]
 800062a:	e001      	b.n	8000630 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000630:	7dfb      	ldrb	r3, [r7, #23]
}
 8000632:	4618      	mov	r0, r3
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	4002640f 	.word	0x4002640f
 8000644:	40026000 	.word	0x40026000
 8000648:	40026400 	.word	0x40026400

0800064c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <DMA_ClearFlag+0x50>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d802      	bhi.n	8000664 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <DMA_ClearFlag+0x54>)
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e001      	b.n	8000668 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <DMA_ClearFlag+0x58>)
 8000666:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000678:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000680:	e006      	b.n	8000690 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000688:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	6093      	str	r3, [r2, #8]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	4002640f 	.word	0x4002640f
 80006a0:	40026000 	.word	0x40026000
 80006a4:	40026400 	.word	0x40026400

080006a8 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00f      	beq.n	80006e0 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	e005      	b.n	80006e0 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	2b80      	cmp	r3, #128	; 0x80
 80006e4:	d014      	beq.n	8000710 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d008      	beq.n	80006fe <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f003 031e 	and.w	r3, r3, #30
 80006f6:	431a      	orrs	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80006fc:	e008      	b.n	8000710 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	f003 031e 	and.w	r3, r3, #30
 8000708:	43db      	mvns	r3, r3
 800070a:	401a      	ands	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800071c:	b480      	push	{r7}
 800071e:	b087      	sub	sp, #28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e076      	b.n	8000826 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000738:	2201      	movs	r2, #1
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800074c:	68fa      	ldr	r2, [r7, #12]
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	429a      	cmp	r2, r3
 8000752:	d165      	bne.n	8000820 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	2103      	movs	r1, #3
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	401a      	ands	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	431a      	orrs	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d003      	beq.n	8000792 <GPIO_Init+0x76>
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d12e      	bne.n	80007f0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	2103      	movs	r1, #3
 800079c:	fa01 f303 	lsl.w	r3, r1, r3
 80007a0:	43db      	mvns	r3, r3
 80007a2:	401a      	ands	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	795b      	ldrb	r3, [r3, #5]
 80007b0:	4619      	mov	r1, r3
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	2301      	movs	r3, #1
 80007cc:	408b      	lsls	r3, r1
 80007ce:	43db      	mvns	r3, r3
 80007d0:	401a      	ands	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	7992      	ldrb	r2, [r2, #6]
 80007de:	4611      	mov	r1, r2
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	b292      	uxth	r2, r2
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	b292      	uxth	r2, r2
 80007ea:	431a      	orrs	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	2103      	movs	r1, #3
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	401a      	ands	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	79db      	ldrb	r3, [r3, #7]
 8000810:	4619      	mov	r1, r3
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d985      	bls.n	8000738 <GPIO_Init+0x1c>
    }
  }
}
 800082c:	bf00      	nop
 800082e:	371c      	adds	r7, #28
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	71da      	strb	r2, [r3, #7]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	807b      	strh	r3, [r7, #2]
 8000878:	4613      	mov	r3, r2
 800087a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000884:	787a      	ldrb	r2, [r7, #1]
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	b29b      	uxth	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	887b      	ldrh	r3, [r7, #2]
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	210f      	movs	r1, #15
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	ea02 0103 	and.w	r1, r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f100 0208 	add.w	r2, r0, #8
 80008c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3208      	adds	r2, #8
 80008d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3208      	adds	r2, #8
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 800090c:	4907      	ldr	r1, [pc, #28]	; (800092c <RCC_PLLI2SConfig+0x2c>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	019a      	lsls	r2, r3, #6
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	071b      	lsls	r3, r3, #28
 8000916:	431a      	orrs	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4313      	orrs	r3, r2
 800091c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40023800 	.word	0x40023800

08000930 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <RCC_PLLI2SCmd+0x1c>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	42470068 	.word	0x42470068

08000950 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <RCC_I2SCLKConfig+0x1c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	4247015c 	.word	0x4247015c

08000970 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d006      	beq.n	8000990 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000982:	490a      	ldr	r1, [pc, #40]	; (80009ac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4313      	orrs	r3, r2
 800098c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800098e:	e006      	b.n	800099e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000990:	4906      	ldr	r1, [pc, #24]	; (80009ac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	43db      	mvns	r3, r3
 800099a:	4013      	ands	r3, r2
 800099c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80009c2:	490a      	ldr	r1, [pc, #40]	; (80009ec <RCC_APB1PeriphClockCmd+0x3c>)
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <RCC_APB1PeriphClockCmd+0x3c>)
 80009c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80009ce:	e006      	b.n	80009de <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80009d0:	4906      	ldr	r1, [pc, #24]	; (80009ec <RCC_APB1PeriphClockCmd+0x3c>)
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <RCC_APB1PeriphClockCmd+0x3c>)
 80009d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	43db      	mvns	r3, r3
 80009da:	4013      	ands	r3, r2
 80009dc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	095b      	lsrs	r3, r3, #5
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d103      	bne.n	8000a1c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <RCC_GetFlagStatus+0x70>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e009      	b.n	8000a30 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d103      	bne.n	8000a2a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <RCC_GetFlagStatus+0x70>)
 8000a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e002      	b.n	8000a30 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <RCC_GetFlagStatus+0x70>)
 8000a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a2e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 031f 	and.w	r3, r3, #31
 8000a36:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	74fb      	strb	r3, [r7, #19]
 8000a4c:	e001      	b.n	8000a52 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000a52:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40023800 	.word	0x40023800

08000a64 <I2S_Init>:
  *         to the value of the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b08b      	sub	sp, #44	; 0x2c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	82fb      	strh	r3, [r7, #22]
 8000a72:	2302      	movs	r3, #2
 8000a74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a76:	2300      	movs	r3, #0
 8000a78:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	8b9b      	ldrh	r3, [r3, #28]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000a9c:	f023 030f 	bic.w	r3, r3, #15
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	8b9b      	ldrh	r3, [r3, #28]
 8000ab0:	82fb      	strh	r3, [r7, #22]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d104      	bne.n	8000ac4 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 8000abe:	2302      	movs	r3, #2
 8000ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ac2:	e087      	b.n	8000bd4 <I2S_Init+0x170>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	889b      	ldrh	r3, [r3, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 16;
 8000acc:	2310      	movs	r3, #16
 8000ace:	847b      	strh	r3, [r7, #34]	; 0x22
 8000ad0:	e001      	b.n	8000ad6 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    if(I2S_InitStruct->I2S_Standard <= I2S_Standard_LSB)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	885b      	ldrh	r3, [r3, #2]
 8000ada:	2b20      	cmp	r3, #32
 8000adc:	d802      	bhi.n	8000ae4 <I2S_Init+0x80>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2;
 8000ade:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8000ae4:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <I2S_Init+0x1d4>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d005      	beq.n	8000afc <I2S_Init+0x98>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8000af0:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <I2S_Init+0x1d4>)
 8000af2:	4b51      	ldr	r3, [pc, #324]	; (8000c38 <I2S_Init+0x1d4>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000afa:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8000afc:	4b4e      	ldr	r3, [pc, #312]	; (8000c38 <I2S_Init+0x1d4>)
 8000afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b02:	099b      	lsrs	r3, r3, #6
 8000b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b08:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8000b0a:	4b4b      	ldr	r3, [pc, #300]	; (8000c38 <I2S_Init+0x1d4>)
 8000b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b10:	0f1b      	lsrs	r3, r3, #28
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8000b18:	4b47      	ldr	r3, [pc, #284]	; (8000c38 <I2S_Init+0x1d4>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b20:	613b      	str	r3, [r7, #16]

    if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)
 8000b22:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <I2S_Init+0x1d4>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b2e:	d10b      	bne.n	8000b48 <I2S_Init+0xe4>
    {
      /* Get the I2S source clock value */
      i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8000b30:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <I2S_Init+0x1d8>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	fb02 f203 	mul.w	r2, r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	e00a      	b.n	8000b5e <I2S_Init+0xfa>
    }
    else
    { /* Get the I2S source clock value */
      i2sclk = (uint32_t)(((HSI_VALUE / pllm) * plln) / pllr);
 8000b48:	4a3d      	ldr	r2, [pc, #244]	; (8000c40 <I2S_Init+0x1dc>)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	fb02 f203 	mul.w	r2, r2, r3
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5c:	61bb      	str	r3, [r7, #24]
    }
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	88db      	ldrh	r3, [r3, #6]
 8000b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b66:	d10f      	bne.n	8000b88 <I2S_Init+0x124>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	0a1a      	lsrs	r2, r3, #8
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	461a      	mov	r2, r3
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	3305      	adds	r3, #5
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	e012      	b.n	8000bae <I2S_Init+0x14a>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000b88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b8a:	015b      	lsls	r3, r3, #5
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	3305      	adds	r3, #5
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <I2S_Init+0x1e0>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8000bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8000bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8000bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d902      	bls.n	8000be0 <I2S_Init+0x17c>
 8000bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bdc:	2bff      	cmp	r3, #255	; 0xff
 8000bde:	d903      	bls.n	8000be8 <I2S_Init+0x184>
  {
    /* Set the default values */
    i2sdiv = 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	88da      	ldrh	r2, [r3, #6]
 8000bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	8859      	ldrh	r1, [r3, #2]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000c0c:	4303      	orrs	r3, r0
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	430b      	orrs	r3, r1
 8000c12:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	8afb      	ldrh	r3, [r7, #22]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c22:	82fb      	strh	r3, [r7, #22]
    /* Write to SPIx I2SCFGR */  
    SPIx->I2SCFGR = tmpreg | SPI_I2SCFGR_ASTRTEN;
  }
#else
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg ;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	8afa      	ldrh	r2, [r7, #22]
 8000c28:	839a      	strh	r2, [r3, #28]
#endif 
}
 8000c2a:	bf00      	nop
 8000c2c:	372c      	adds	r7, #44	; 0x2c
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	017d7840 	.word	0x017d7840
 8000c40:	00f42400 	.word	0x00f42400
 8000c44:	cccccccd 	.word	0xcccccccd

08000c48 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	819a      	strh	r2, [r3, #12]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d008      	beq.n	8000ca4 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	8b9b      	ldrh	r3, [r3, #28]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 8000ca2:	e007      	b.n	8000cb4 <I2S_Cmd+0x34>
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	8b9b      	ldrh	r3, [r3, #28]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	839a      	strh	r2, [r3, #28]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8000cd0:	787b      	ldrb	r3, [r7, #1]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d008      	beq.n	8000ce8 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	889b      	ldrh	r3, [r3, #4]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	887b      	ldrh	r3, [r7, #2]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 8000ce6:	e009      	b.n	8000cfc <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	889b      	ldrh	r3, [r3, #4]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	809a      	strh	r2, [r3, #4]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DMA1_Stream4_IRQHandler>:
	*ptr = temp2 | (temp1<<8);


}
void DMA1_Stream4_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	if(DMA_GetFlagStatus(dmaStream, DMA_FLAG_TCIF4) != RESET) {
 8000d0c:	490d      	ldr	r1, [pc, #52]	; (8000d44 <DMA1_Stream4_IRQHandler+0x3c>)
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <DMA1_Stream4_IRQHandler+0x40>)
 8000d10:	f7ff fc60 	bl	80005d4 <DMA_GetFlagStatus>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <DMA1_Stream4_IRQHandler+0x20>
		DMA_ClearFlag(DMA1_Stream4, DMA_FLAG_TCIF4);
 8000d1a:	490a      	ldr	r1, [pc, #40]	; (8000d44 <DMA1_Stream4_IRQHandler+0x3c>)
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <DMA1_Stream4_IRQHandler+0x40>)
 8000d1e:	f7ff fc95 	bl	800064c <DMA_ClearFlag>
		bEmpty = 1;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <DMA1_Stream4_IRQHandler+0x44>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
	}

	if(DMA_GetFlagStatus(dmaStream, DMA_FLAG_HTIF4) != RESET) {
 8000d28:	4909      	ldr	r1, [pc, #36]	; (8000d50 <DMA1_Stream4_IRQHandler+0x48>)
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <DMA1_Stream4_IRQHandler+0x40>)
 8000d2c:	f7ff fc52 	bl	80005d4 <DMA_GetFlagStatus>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <DMA1_Stream4_IRQHandler+0x36>
		DMA_ClearFlag(dmaStream, DMA_FLAG_HTIF4);
 8000d36:	4906      	ldr	r1, [pc, #24]	; (8000d50 <DMA1_Stream4_IRQHandler+0x48>)
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <DMA1_Stream4_IRQHandler+0x40>)
 8000d3a:	f7ff fc87 	bl	800064c <DMA_ClearFlag>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000020 	.word	0x20000020
 8000d48:	40026070 	.word	0x40026070
 8000d4c:	20001194 	.word	0x20001194
 8000d50:	20000010 	.word	0x20000010

08000d54 <I2S_DMAInit>:

static inline void I2S_DMAInit(uint32_t bufferSize)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b092      	sub	sp, #72	; 0x48
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef dmaInit;
	NVIC_InitTypeDef nvicInit;

	DMA_DeInit(dmaStream);
 8000d5c:	4833      	ldr	r0, [pc, #204]	; (8000e2c <I2S_DMAInit+0xd8>)
 8000d5e:	f7ff fa9d 	bl	800029c <DMA_DeInit>
	DMA_Cmd(dmaStream, DISABLE);
 8000d62:	2100      	movs	r1, #0
 8000d64:	4831      	ldr	r0, [pc, #196]	; (8000e2c <I2S_DMAInit+0xd8>)
 8000d66:	f7ff fbc5 	bl	80004f4 <DMA_Cmd>
	while(DMA_GetCmdStatus(dmaStream) == ENABLE){};
 8000d6a:	bf00      	nop
 8000d6c:	482f      	ldr	r0, [pc, #188]	; (8000e2c <I2S_DMAInit+0xd8>)
 8000d6e:	f7ff fc18 	bl	80005a2 <DMA_GetCmdStatus>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d0f9      	beq.n	8000d6c <I2S_DMAInit+0x18>
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 8000d78:	f3bf 8f6f 	isb	sy
	__ISB(); //what is this??

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d82:	f7ff fdf5 	bl	8000970 <RCC_AHB1PeriphClockCmd>

	//To
	dmaInit.DMA_PeripheralBaseAddr = (uint32_t) &(SPI2->DR);
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <I2S_DMAInit+0xdc>)
 8000d88:	613b      	str	r3, [r7, #16]
	//From
	dmaInit.DMA_Memory0BaseAddr = (uint32_t)&rawData[0];
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <I2S_DMAInit+0xe0>)
 8000d8c:	617b      	str	r3, [r7, #20]
	dmaInit.DMA_BufferSize = 1125;
 8000d8e:	f240 4365 	movw	r3, #1125	; 0x465
 8000d92:	61fb      	str	r3, [r7, #28]

	dmaInit.DMA_Channel = DMA_Channel_0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
	dmaInit.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	61bb      	str	r3, [r7, #24]
	dmaInit.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
	dmaInit.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
	dmaInit.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
//	dmaInit.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
	dmaInit.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
//	dmaInit.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
	dmaInit.DMA_Mode = DMA_Mode_Circular;
 8000db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
	dmaInit.DMA_Priority = DMA_Priority_High;
 8000db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
	dmaInit.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
	dmaInit.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull; //is ir right??
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	dmaInit.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	643b      	str	r3, [r7, #64]	; 0x40
	dmaInit.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	647b      	str	r3, [r7, #68]	; 0x44
	while(DMA_GetCmdStatus(dmaStream) == ENABLE);
 8000dce:	bf00      	nop
 8000dd0:	4816      	ldr	r0, [pc, #88]	; (8000e2c <I2S_DMAInit+0xd8>)
 8000dd2:	f7ff fbe6 	bl	80005a2 <DMA_GetCmdStatus>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d0f9      	beq.n	8000dd0 <I2S_DMAInit+0x7c>

	DMA_Init(dmaStream, &dmaInit);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <I2S_DMAInit+0xd8>)
 8000de4:	f7ff fb2e 	bl	8000444 <DMA_Init>

	DMA_DoubleBufferModeConfig(dmaStream, (uint32_t)&rawData, DMA_Memory_1);
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <I2S_DMAInit+0xe0>)
 8000dea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dee:	4619      	mov	r1, r3
 8000df0:	480e      	ldr	r0, [pc, #56]	; (8000e2c <I2S_DMAInit+0xd8>)
 8000df2:	f7ff fb9b 	bl	800052c <DMA_DoubleBufferModeConfig>
	DMA_ITConfig(dmaStream, DMA_IT_TC | DMA_IT_HT /*| DMA_IT_TE | DMA_IT_DME | DMA_IT_FE*/, ENABLE);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2118      	movs	r1, #24
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <I2S_DMAInit+0xd8>)
 8000dfc:	f7ff fc54 	bl	80006a8 <DMA_ITConfig>
	DMA_DoubleBufferModeCmd(dmaStream, ENABLE);
 8000e00:	2101      	movs	r1, #1
 8000e02:	480a      	ldr	r0, [pc, #40]	; (8000e2c <I2S_DMAInit+0xd8>)
 8000e04:	f7ff fbb1 	bl	800056a <DMA_DoubleBufferModeCmd>

	//configure interrupt
	nvicInit.NVIC_IRQChannel = DMA1_Stream4_IRQn;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	723b      	strb	r3, [r7, #8]
	nvicInit.NVIC_IRQChannelPreemptionPriority = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	727b      	strb	r3, [r7, #9]
	nvicInit.NVIC_IRQChannelSubPriority = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	72bb      	strb	r3, [r7, #10]
	nvicInit.NVIC_IRQChannelCmd = ENABLE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&nvicInit);
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f9db 	bl	80001d8 <NVIC_Init>

}
 8000e22:	bf00      	nop
 8000e24:	3748      	adds	r7, #72	; 0x48
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40026070 	.word	0x40026070
 8000e30:	4000380c 	.word	0x4000380c
 8000e34:	20000000 	.word	0x20000000

08000e38 <I2S_PPL_Config>:

void I2S_PPL_Config(uint32_t freq) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	RCC_PLLI2SCmd(DISABLE);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff fd75 	bl	8000930 <RCC_PLLI2SCmd>

	RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff fd82 	bl	8000950 <RCC_I2SCLKConfig>
	//for 44k N-271, R-2, for 48K N-258, R-3
	//N, R, M
	if(freq == 48000)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d106      	bne.n	8000e64 <I2S_PPL_Config+0x2c>
	{
		RCC_PLLI2SConfig(258, 3, 25);
 8000e56:	2219      	movs	r2, #25
 8000e58:	2103      	movs	r1, #3
 8000e5a:	f44f 7081 	mov.w	r0, #258	; 0x102
 8000e5e:	f7ff fd4f 	bl	8000900 <RCC_PLLI2SConfig>
 8000e62:	e00a      	b.n	8000e7a <I2S_PPL_Config+0x42>

//		RCC_PLLI2SConfig(289, 4, 21);	good but not enough
	}
	else if(freq == 44100)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d105      	bne.n	8000e7a <I2S_PPL_Config+0x42>
	{
//		I2S_PPL_Config(271, 2); //271 2 result in 88,2
		RCC_PLLI2SConfig(271, 2, 25);
 8000e6e:	2219      	movs	r2, #25
 8000e70:	2102      	movs	r1, #2
 8000e72:	f240 100f 	movw	r0, #271	; 0x10f
 8000e76:	f7ff fd43 	bl	8000900 <RCC_PLLI2SConfig>
//		I2S_PPL_Config(168, 2);
	}
//	RCC_PLLI2SConfig(N, R, 25);
	RCC_PLLI2SCmd(ENABLE);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff fd58 	bl	8000930 <RCC_PLLI2SCmd>

	while(RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY) == RESET){};
 8000e80:	bf00      	nop
 8000e82:	203b      	movs	r0, #59	; 0x3b
 8000e84:	f7ff fdb4 	bl	80009f0 <RCC_GetFlagStatus>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f9      	beq.n	8000e82 <I2S_PPL_Config+0x4a>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <I2SInit>:

void I2SInit(uint32_t frequency, uint16_t bitRate, uint32_t bufferSize)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef gpioInit;
	I2S_InitTypeDef i2sInit;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000eac:	f7ff fd80 	bl	80009b0 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f7ff fd5c 	bl	8000970 <RCC_AHB1PeriphClockCmd>
	I2S_PPL_Config(frequency);
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff ffbd 	bl	8000e38 <I2S_PPL_Config>

	//WS - word clock output
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource12, GPIO_AF_SPI2);		//for SPI2 pins: PB12
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	210c      	movs	r1, #12
 8000ec2:	4859      	ldr	r0, [pc, #356]	; (8001028 <I2SInit+0x190>)
 8000ec4:	f7ff fcd2 	bl	800086c <GPIO_PinAFConfig>
		GPIO_StructInit(&gpioInit);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fcb3 	bl	8000838 <GPIO_StructInit>

		gpioInit.GPIO_Pin = GPIO_Pin_12;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
		gpioInit.GPIO_Mode = GPIO_Mode_AF;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		gpioInit.GPIO_OType = GPIO_OType_PP;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		gpioInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		gpioInit.GPIO_Speed = GPIO_Speed_100MHz;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		GPIO_Init(GPIOB, &gpioInit);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	484c      	ldr	r0, [pc, #304]	; (8001028 <I2SInit+0x190>)
 8000ef8:	f7ff fc10 	bl	800071c <GPIO_Init>

		//BCLK - shift clock output
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_SPI2);		//PB10
 8000efc:	2205      	movs	r2, #5
 8000efe:	210a      	movs	r1, #10
 8000f00:	4849      	ldr	r0, [pc, #292]	; (8001028 <I2SInit+0x190>)
 8000f02:	f7ff fcb3 	bl	800086c <GPIO_PinAFConfig>
		gpioInit.GPIO_Pin = GPIO_Pin_10;
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Init(GPIOB, &gpioInit);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4845      	ldr	r0, [pc, #276]	; (8001028 <I2SInit+0x190>)
 8000f14:	f7ff fc02 	bl	800071c <GPIO_Init>

		//SD - serial audio data
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_SPI2);		//PB15
 8000f18:	2205      	movs	r2, #5
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	4842      	ldr	r0, [pc, #264]	; (8001028 <I2SInit+0x190>)
 8000f1e:	f7ff fca5 	bl	800086c <GPIO_PinAFConfig>
		gpioInit.GPIO_Pin = GPIO_Pin_15;
 8000f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Init(GPIOB, &gpioInit);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	483e      	ldr	r0, [pc, #248]	; (8001028 <I2SInit+0x190>)
 8000f30:	f7ff fbf4 	bl	800071c <GPIO_Init>

		//MCO - master clock output
		GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_SPI2);			//PC6
 8000f34:	2205      	movs	r2, #5
 8000f36:	2103      	movs	r1, #3
 8000f38:	483c      	ldr	r0, [pc, #240]	; (800102c <I2SInit+0x194>)
 8000f3a:	f7ff fc97 	bl	800086c <GPIO_PinAFConfig>
		gpioInit.GPIO_Pin = GPIO_Pin_3;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_Init(GPIOA, &gpioInit);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4838      	ldr	r0, [pc, #224]	; (800102c <I2SInit+0x194>)
 8000f4a:	f7ff fbe7 	bl	800071c <GPIO_Init>

	I2S_StructInit(&i2sInit);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fe78 	bl	8000c48 <I2S_StructInit>

//	i2sInit.I2S_CPOL = I2S_CPOL_Low;
	i2sInit.I2S_CPOL = I2S_CPOL_High;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	843b      	strh	r3, [r7, #32]
	i2sInit.I2S_Mode = I2S_Mode_MasterTx;
 8000f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f60:	82bb      	strh	r3, [r7, #20]
	i2sInit.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8000f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f66:	837b      	strh	r3, [r7, #26]
	i2sInit.I2S_Standard = I2S_Standard_Phillips;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	82fb      	strh	r3, [r7, #22]
	i2sInit.I2S_AudioFreq = (uint32_t)frequency;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	61fb      	str	r3, [r7, #28]
	if(bitRate == 16) {
 8000f70:	897b      	ldrh	r3, [r7, #10]
 8000f72:	2b10      	cmp	r3, #16
 8000f74:	d102      	bne.n	8000f7c <I2SInit+0xe4>
		i2sInit.I2S_DataFormat = I2S_DataFormat_16b;
 8000f76:	2300      	movs	r3, #0
 8000f78:	833b      	strh	r3, [r7, #24]
 8000f7a:	e010      	b.n	8000f9e <I2SInit+0x106>
	} else if(bitRate == 17) {
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	2b11      	cmp	r3, #17
 8000f80:	d102      	bne.n	8000f88 <I2SInit+0xf0>
		i2sInit.I2S_DataFormat = I2S_DataFormat_16bextended;
 8000f82:	2301      	movs	r3, #1
 8000f84:	833b      	strh	r3, [r7, #24]
 8000f86:	e00a      	b.n	8000f9e <I2SInit+0x106>
	} else if(bitRate == 24) {
 8000f88:	897b      	ldrh	r3, [r7, #10]
 8000f8a:	2b18      	cmp	r3, #24
 8000f8c:	d102      	bne.n	8000f94 <I2SInit+0xfc>
		i2sInit.I2S_DataFormat = I2S_DataFormat_24b;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	833b      	strh	r3, [r7, #24]
 8000f92:	e004      	b.n	8000f9e <I2SInit+0x106>
	} else if(bitRate == 32) {
 8000f94:	897b      	ldrh	r3, [r7, #10]
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d101      	bne.n	8000f9e <I2SInit+0x106>
		i2sInit.I2S_DataFormat = I2S_DataFormat_32b;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	833b      	strh	r3, [r7, #24]
	}
	I2S_Init(SPI2, &i2sInit);										//SPI3		//SPI2
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4822      	ldr	r0, [pc, #136]	; (8001030 <I2SInit+0x198>)
 8000fa6:	f7ff fd5d 	bl	8000a64 <I2S_Init>
//	{
//		SPI2->I2SPR |= (1 << 8); //ODD and I2SDIV works how???
//	}
	//maybe should do this in different place

	uint32_t * ttestPtr = &rawData[0];
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <I2SInit+0x19c>)
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i=0; i<(1125); ++i)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fb2:	e015      	b.n	8000fe0 <I2SInit+0x148>
	{
		uint32_t tmp = *ttestPtr;
 8000fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
		uint16_t tmp1 = tmp & 0xFFFF;
 8000fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbc:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t tmp2 = (tmp >> 16) & 0xFFFF;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc0:	0c1b      	lsrs	r3, r3, #16
 8000fc2:	863b      	strh	r3, [r7, #48]	; 0x30

		uint32_t res = tmp2 | (tmp1 << 16);
 8000fc4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000fc6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000fc8:	041b      	lsls	r3, r3, #16
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
		*ttestPtr = res;
 8000fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd2:	601a      	str	r2, [r3, #0]
		ttestPtr++;
 8000fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i=0; i<(1125); ++i)
 8000fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fdc:	3301      	adds	r3, #1
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe2:	f240 4264 	movw	r2, #1124	; 0x464
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	dde4      	ble.n	8000fb4 <I2SInit+0x11c>
	}

	I2S_DMAInit(bufferSize);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff feb2 	bl	8000d54 <I2S_DMAInit>
	SPI_I2S_DMACmd(SPI2, SPI_I2S_DMAReq_Tx, ENABLE);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	480e      	ldr	r0, [pc, #56]	; (8001030 <I2SInit+0x198>)
 8000ff6:	f7ff fe63 	bl	8000cc0 <SPI_I2S_DMACmd>

	//maybe should do this in different place
	I2S_Cmd(SPI2, ENABLE);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <I2SInit+0x198>)
 8000ffe:	f7ff fe3f 	bl	8000c80 <I2S_Cmd>
	DMA_Cmd(dmaStream, ENABLE);									//DMA1_Stream7	//DMA1_Stream4
 8001002:	2101      	movs	r1, #1
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <I2SInit+0x1a0>)
 8001006:	f7ff fa75 	bl	80004f4 <DMA_Cmd>
	DMA_ClearFlag(DMA1_Stream4, DMA_FLAG_TCIF4 | DMA_FLAG_HTIF4 | DMA_FLAG_TEIF4 | DMA_FLAG_DMEIF4 | DMA_FLAG_FEIF4);
 800100a:	490c      	ldr	r1, [pc, #48]	; (800103c <I2SInit+0x1a4>)
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <I2SInit+0x1a0>)
 800100e:	f7ff fb1d 	bl	800064c <DMA_ClearFlag>
	while(DMA_GetCmdStatus(dmaStream) != ENABLE){};
 8001012:	bf00      	nop
 8001014:	4808      	ldr	r0, [pc, #32]	; (8001038 <I2SInit+0x1a0>)
 8001016:	f7ff fac4 	bl	80005a2 <DMA_GetCmdStatus>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d1f9      	bne.n	8001014 <I2SInit+0x17c>
}
 8001020:	bf00      	nop
 8001022:	3740      	adds	r7, #64	; 0x40
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40020400 	.word	0x40020400
 800102c:	40020000 	.word	0x40020000
 8001030:	40003800 	.word	0x40003800
 8001034:	20000000 	.word	0x20000000
 8001038:	40026070 	.word	0x40026070
 800103c:	2000003d 	.word	0x2000003d

08001040 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
  int i = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800104a:	2101      	movs	r1, #1
 800104c:	2004      	movs	r0, #4
 800104e:	f7ff fc8f 	bl	8000970 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef gpio;
  gpio.GPIO_Pin = GPIO_Pin_13;	//blue led
 8001052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001056:	607b      	str	r3, [r7, #4]
  gpio.GPIO_Mode = GPIO_Mode_OUT;
 8001058:	2301      	movs	r3, #1
 800105a:	723b      	strb	r3, [r7, #8]
  gpio.GPIO_Speed = GPIO_Speed_50MHz;
 800105c:	2302      	movs	r3, #2
 800105e:	727b      	strb	r3, [r7, #9]
  gpio.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001060:	2302      	movs	r3, #2
 8001062:	72fb      	strb	r3, [r7, #11]
  gpio.GPIO_OType = GPIO_OType_PP;
 8001064:	2300      	movs	r3, #0
 8001066:	72bb      	strb	r3, [r7, #10]
  GPIO_Init(GPIOC, &gpio);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4834      	ldr	r0, [pc, #208]	; (8001140 <main+0x100>)
 800106e:	f7ff fb55 	bl	800071c <GPIO_Init>

  I2SInit(44100, 24, 512);
 8001072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001076:	2118      	movs	r1, #24
 8001078:	f64a 4044 	movw	r0, #44100	; 0xac44
 800107c:	f7ff ff0c 	bl	8000e98 <I2SInit>
  //GPIOB power enabled in I2SInit

  gpio.GPIO_Pin = GPIO_Pin_0;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  gpio.GPIO_Speed = GPIO_Speed_100MHz;
 8001084:	2303      	movs	r3, #3
 8001086:	727b      	strb	r3, [r7, #9]
  GPIO_Init(GPIOB, &gpio);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	482d      	ldr	r0, [pc, #180]	; (8001144 <main+0x104>)
 800108e:	f7ff fb45 	bl	800071c <GPIO_Init>

  gpio.GPIO_Pin = GPIO_Pin_1;
 8001092:	2302      	movs	r3, #2
 8001094:	607b      	str	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	482a      	ldr	r0, [pc, #168]	; (8001144 <main+0x104>)
 800109c:	f7ff fb3e 	bl	800071c <GPIO_Init>
  gpio.GPIO_Pin = GPIO_Pin_2;
 80010a0:	2304      	movs	r3, #4
 80010a2:	607b      	str	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio);
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4826      	ldr	r0, [pc, #152]	; (8001144 <main+0x104>)
 80010aa:	f7ff fb37 	bl	800071c <GPIO_Init>
  gpio.GPIO_Pin = GPIO_Pin_3;
 80010ae:	2308      	movs	r3, #8
 80010b0:	607b      	str	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4823      	ldr	r0, [pc, #140]	; (8001144 <main+0x104>)
 80010b8:	f7ff fb30 	bl	800071c <GPIO_Init>
  gpio.GPIO_Pin = GPIO_Pin_4;
 80010bc:	2310      	movs	r3, #16
 80010be:	607b      	str	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	481f      	ldr	r0, [pc, #124]	; (8001144 <main+0x104>)
 80010c6:	f7ff fb29 	bl	800071c <GPIO_Init>
  gpio.GPIO_Pin = GPIO_Pin_5;
 80010ca:	2320      	movs	r3, #32
 80010cc:	607b      	str	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	481c      	ldr	r0, [pc, #112]	; (8001144 <main+0x104>)
 80010d4:	f7ff fb22 	bl	800071c <GPIO_Init>

  GPIOB->ODR &= ~GPIO_Pin_0;	//Audio PND On
 80010d8:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <main+0x104>)
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <main+0x104>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_Pin_1;	//+48 PND Off
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <main+0x104>)
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <main+0x104>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f023 0302 	bic.w	r3, r3, #2
 80010ee:	6153      	str	r3, [r2, #20]
  GPIOB->ODR |= GPIO_Pin_2;	//RST On(High = enable)
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <main+0x104>)
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <main+0x104>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_Pin_3;	//FS0 = low
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <main+0x104>)
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <main+0x104>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f023 0308 	bic.w	r3, r3, #8
 8001106:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_Pin_4;	//FS1 = low
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <main+0x104>)
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <main+0x104>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f023 0310 	bic.w	r3, r3, #16
 8001112:	6153      	str	r3, [r2, #20]
  GPIOB->ODR &= ~GPIO_Pin_5;	//Mute = low
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <main+0x104>)
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <main+0x104>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f023 0320 	bic.w	r3, r3, #32
 800111e:	6153      	str	r3, [r2, #20]

  /* Infinite loop */
  while (1)
  {
	i++;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
	if(i == 30000000)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <main+0x108>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d1f8      	bne.n	8001120 <main+0xe0>
	{
		GPIOC->ODR ^= GPIO_Pin_13;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <main+0x100>)
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <main+0x100>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001138:	6153      	str	r3, [r2, #20]
		i = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	i++;
 800113e:	e7ef      	b.n	8001120 <main+0xe0>
 8001140:	40020800 	.word	0x40020800
 8001144:	40020400 	.word	0x40020400
 8001148:	01c9c380 	.word	0x01c9c380

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001150:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001152:	e003      	b.n	800115c <LoopCopyDataInit>

08001154 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001156:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001158:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800115a:	3104      	adds	r1, #4

0800115c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001160:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001162:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001164:	d3f6      	bcc.n	8001154 <CopyDataInit>
  ldr  r2, =_sbss
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001168:	e002      	b.n	8001170 <LoopFillZerobss>

0800116a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800116a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800116c:	f842 3b04 	str.w	r3, [r2], #4

08001170 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001172:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001174:	d3f9      	bcc.n	800116a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001176:	f000 f841 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f000 f8ef 	bl	800135c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff ff5f 	bl	8001040 <main>
  bx  lr    
 8001182:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001184:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001188:	080013c4 	.word	0x080013c4
  ldr  r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001190:	20001198 	.word	0x20001198
  ldr  r2, =_sbss
 8001194:	20001198 	.word	0x20001198
  ldr  r3, = _ebss
 8001198:	200011b4 	.word	0x200011b4

0800119c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>

0800119e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <HardFault_Handler+0x4>

080011b2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <MemManage_Handler+0x4>

080011b8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <BusFault_Handler+0x4>

080011be <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <UsageFault_Handler+0x4>

080011c4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4a16      	ldr	r2, [pc, #88]	; (800125c <SystemInit+0x60>)
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <SystemInit+0x60>)
 8001204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <SystemInit+0x64>)
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <SystemInit+0x64>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <SystemInit+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <SystemInit+0x64>)
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <SystemInit+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800122c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <SystemInit+0x64>)
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <SystemInit+0x68>)
 8001236:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <SystemInit+0x64>)
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <SystemInit+0x64>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <SystemInit+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800124a:	f000 f80d 	bl	8001268 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800124e:	4b03      	ldr	r3, [pc, #12]	; (800125c <SystemInit+0x60>)
 8001250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001254:	609a      	str	r2, [r3, #8]
#endif
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	40023800 	.word	0x40023800
 8001264:	24003010 	.word	0x24003010

08001268 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
#elif defined(STM32F410xx) || defined(STM32F411xE)
#if 1
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
  /* Enable HSE and HSE BYPASS */

#if defined(USE_HSE_BYPASS)
  RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
#else
  RCC->CR |= (uint32_t)RCC_CR_HSEON;
 8001276:	4a35      	ldr	r2, [pc, #212]	; (800134c <SetSysClock+0xe4>)
 8001278:	4b34      	ldr	r3, [pc, #208]	; (800134c <SetSysClock+0xe4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
#endif
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <SetSysClock+0xe4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3301      	adds	r3, #1
 8001290:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <SetSysClock+0x38>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800129e:	d1f0      	bne.n	8001282 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <SetSysClock+0xe4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80012ac:	2301      	movs	r3, #1
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	e001      	b.n	80012b6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d140      	bne.n	800133e <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80012bc:	4a23      	ldr	r2, [pc, #140]	; (800134c <SetSysClock+0xe4>)
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <SetSysClock+0xe4>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80012c8:	4a21      	ldr	r2, [pc, #132]	; (8001350 <SetSysClock+0xe8>)
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <SetSysClock+0xe8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <SetSysClock+0xe4>)
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <SetSysClock+0xe4>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <SetSysClock+0xe4>)
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <SetSysClock+0xe4>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <SetSysClock+0xe4>)
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <SetSysClock+0xe4>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ee:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <SetSysClock+0xe4>)
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <SetSysClock+0xec>)
 80012f4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012f6:	4a15      	ldr	r2, [pc, #84]	; (800134c <SetSysClock+0xe4>)
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <SetSysClock+0xe4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001300:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001302:	bf00      	nop
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <SetSysClock+0xe4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f9      	beq.n	8001304 <SetSysClock+0x9c>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <SetSysClock+0xf0>)
 8001312:	f240 7202 	movw	r2, #1794	; 0x702
 8001316:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001318:	4a0c      	ldr	r2, [pc, #48]	; (800134c <SetSysClock+0xe4>)
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <SetSysClock+0xe4>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f023 0303 	bic.w	r3, r3, #3
 8001322:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <SetSysClock+0xe4>)
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <SetSysClock+0xe4>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001330:	bf00      	nop
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <SetSysClock+0xe4>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d1f9      	bne.n	8001332 <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000
 8001354:	07416419 	.word	0x07416419
 8001358:	40023c00 	.word	0x40023c00

0800135c <__libc_init_array>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	4e0d      	ldr	r6, [pc, #52]	; (8001394 <__libc_init_array+0x38>)
 8001360:	4c0d      	ldr	r4, [pc, #52]	; (8001398 <__libc_init_array+0x3c>)
 8001362:	1ba4      	subs	r4, r4, r6
 8001364:	10a4      	asrs	r4, r4, #2
 8001366:	2500      	movs	r5, #0
 8001368:	42a5      	cmp	r5, r4
 800136a:	d109      	bne.n	8001380 <__libc_init_array+0x24>
 800136c:	4e0b      	ldr	r6, [pc, #44]	; (800139c <__libc_init_array+0x40>)
 800136e:	4c0c      	ldr	r4, [pc, #48]	; (80013a0 <__libc_init_array+0x44>)
 8001370:	f000 f818 	bl	80013a4 <_init>
 8001374:	1ba4      	subs	r4, r4, r6
 8001376:	10a4      	asrs	r4, r4, #2
 8001378:	2500      	movs	r5, #0
 800137a:	42a5      	cmp	r5, r4
 800137c:	d105      	bne.n	800138a <__libc_init_array+0x2e>
 800137e:	bd70      	pop	{r4, r5, r6, pc}
 8001380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001384:	4798      	blx	r3
 8001386:	3501      	adds	r5, #1
 8001388:	e7ee      	b.n	8001368 <__libc_init_array+0xc>
 800138a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800138e:	4798      	blx	r3
 8001390:	3501      	adds	r5, #1
 8001392:	e7f2      	b.n	800137a <__libc_init_array+0x1e>
 8001394:	080013bc 	.word	0x080013bc
 8001398:	080013bc 	.word	0x080013bc
 800139c:	080013bc 	.word	0x080013bc
 80013a0:	080013c0 	.word	0x080013c0

080013a4 <_init>:
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	bf00      	nop
 80013a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013aa:	bc08      	pop	{r3}
 80013ac:	469e      	mov	lr, r3
 80013ae:	4770      	bx	lr

080013b0 <_fini>:
 80013b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b2:	bf00      	nop
 80013b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b6:	bc08      	pop	{r3}
 80013b8:	469e      	mov	lr, r3
 80013ba:	4770      	bx	lr
